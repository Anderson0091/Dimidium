@page "/fetchdata"
@using Dimidiun.Data
@inject WeatherForecastService ForecastService



<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    }
}

<div style="display: flex; flex-direction: row;">
    

<ul>
    @foreach (var item in menuItems)
    {
        <li><a href="@item.Url">@item.Text</a></li>
    }
</ul>

@code {
    private List<MenuItem> menuItems = new List<MenuItem>
    {
          new MenuItem { Url = "/", Text = "Inicio" },
        new MenuItem { Url = "/Counter", Text = "Acerca de" },
        new MenuItem { Url = "/Index", Text = "Contacto" },
        new MenuItem { Url = "/FetchData", Text = "Servicios" },
         new MenuItem { Url = "/Prueba", Text = "Pruebas" },
    };

    private class MenuItem
    {
        public string Url { get; set; }
        public string Text { get; set; }
    }
}




</div>