@page "/login"
@using Dimidiun.Data.Request;
@using Dimidiun.Data.Response;
@using Microsoft.AspNetCore.Components.Web


<PageTitle>Index</PageTitle>



@if (!ShowForm)
{
			<div class="la314">
				<h2 class="">Iniciar Sesión</h2>
				<input type="text" placeholder="Correo Electronico">
				<br />
				<input type="password" placeholder="Contraseña">
				<br>
				<br>
				<button type="submit" class="btn btn-outline-success">Iniciar Sesión</button>
				<br>
				<br>
				
			</div>
	
	<button class="btn btn-secondary"
				@onclick="()=>{ShowForm = !ShowForm;}">
					Registrar
				</button>
			

}

	@if (ShowForm)
	{
	
		<EditForm Model="request" OnValidSubmit="Send">
<div class="la314">

			<h3>@TituloForm</h3>


			<div class="mb-3 input-group ">
				<label class="input-group-text">Nombre</label>
				<InputText class="form-control" @bind-Value="@request.Nombre"></InputText>
			</div>
			<div class="mb-3 input-group">
				<label class="input-group-text">Apellido</label>
				<InputText class="form-control" @bind-Value="@request.Apellido"></InputText>
			</div>

			<div class="mb-3 input-group">
				<label class="input-group-text">Contraseña</label>
				<InputText class="form-control" @bind-Value="@request.Contraseña"></InputText>
			</div>
			<div class="mb-3 input-group">
				<label class="input-group-text">Telefono</label>
				<InputText class="form-control" @bind-Value="@request.Telefono"></InputText>
			</div>

			<div class="mb-3 input-group">
				<label class="input-group-text">Edad</label>
				<InputNumber class="form-control" @bind-Value="@request.Edad"></InputNumber>
			</div>
			<div class="mb-3 input-group">
				<label class="input-group-text">Email</label>
				<InputText class="form-control" @bind-Value="@request.Email"></InputText>
			</div>


			<div class="mb-3 input-group">
				<label class="input-group-text">Genero</label>
				<select class="form-control" @bind="request.Genero">
						<option> Chico  </option>
					<option>Chica</option>
				</select>
			</div>
			<div class="mb-3 input-group">
				<label class="input-group-text">Ubicacion</label>
				<InputText class="form-control" @bind-Value="@request.Ubicacion"></InputText>
			</div>

			<div class="mb-3 input-group ">
				<label class="input-group-text">Foto</label>
				<InputText class="form-control"  @bind-Value="@request.FotoPerfil">
				</InputText>
			</div>
			<div class="mb-3 input-group">
				<label class="input-group-text">Intereses</label>
				<InputText class="form-control" @bind-Value="@request.Intereses"></InputText>


			</div>



			<div class="btn-group">
				<button type="submit" @onclick="GuardarUsuario" class="btn btn-outline-success">Guardar</button>
				<button @onclick="Cancelar" class="btn btn-outline-danger">Cancelar</button>
			</div>
			</div>
		</EditForm>
	}

	else
	{

		<div Class="container">
			@foreach (var usuario in Usuarios)
			{
		


			}

		</div>
	}




@code {

	public string TituloForm => request.IdUsuario == 0 ?
		"Agregar Usuario" : "Modificar Usuario";

	public bool ShowForm { get; set; } = false;


	public string Filtro { get; set; } = "";

	public List<UsuarioResponse> Usuarios { get; set; } = new List<UsuarioResponse>();



	public UsuarioRequest request { get; set; } = new UsuarioRequest();



	void Cancelar()
	{
		request  = new UsuarioRequest();
		ShowForm = false;
	}




	async Task CargarUsuarios()
	{
		var resultado = await UsuarioServices.Consultar(Filtro);

		if (resultado.Success)
		{
			Usuarios = resultado.Data!;

		}

	}

	protected override async Task OnInitializedAsync()
	{
		await CargarUsuarios();
	}



	@inject IJSRuntime JSRuntime



public async Task Send()
	{
		try
		{
			if (request.IdUsuario == 0)
			{
				// Debo registrar el usuario...
				var resultado = await UsuarioServices.Crear(request);
				if (resultado.Success)
				{
					Cancelar();
					await CargarUsuarios();
					StateHasChanged();
				}
			}
			else
			{
				// Debo modificar el usuario...
				var resultado = await UsuarioServices.Modificar(request);
				if (resultado.Success)
				{
					Cancelar();
					await CargarUsuarios();
					StateHasChanged();
				}
			}
		}
		catch (Exception ex)
		{
			// Mostrar una alerta en caso de error
			await JSRuntime.InvokeVoidAsync("alert", "Error al guardar los datos en la base de datos: " + ex.Message);
		}
	}





	public void Seleccionar(int IdUsuario)
	{
		ShowForm = true;
		request = Usuarios
		.Where(c => c.IdUsuario == IdUsuario)
		.Select(c => c.ToRequest())
		.FirstOrDefault()??new UsuarioRequest();
	}



	public async Task Eliminar(UsuarioResponse contacto)
	{
		var resultado = await UsuarioServices.Eliminar(contacto.ToRequest());
		if (resultado.Success)
		{
			await CargarUsuarios();
			StateHasChanged();
		}
	}

	public async Task GuardarUsuario()
	{
		if (request.IdUsuario == 0)
		{
			// Debo registrar el usuario...
			var resultado = await UsuarioServices.Crear(request);
			if (resultado.Success)
			{
				Cancelar();
				await CargarUsuarios();
				StateHasChanged();
			}
		}
		else
		{
			// Debo modificar el usuario...
			var resultado = await UsuarioServices.Modificar(request);
			if (resultado.Success)
			{
				Cancelar();
				await CargarUsuarios();
				StateHasChanged();
			}
		}
	}



}
